package service

import (
	"encoding/json"
	"fmt"
	"github.com/reusee/mmh3"
	"github.com/skeyic/monitoring/app/utils"
	"io/ioutil"
	"net/http"
	"sync"
	"time"
)

const (
	DLDefaultInitMsgNum    = 5000
	TheDLCollectorFileName = "TheDLCollector.data"
)

var (
	TheDLCollector = NewDLCollector(TheDLCollectorFileName).InitMsgNum(DLDefaultInitMsgNum)
)

type DLMsg struct {
	CommentID uint32 `json:"idx"`
	RichText  string `json:"content"`
}

type DLCollector struct {
	fileName   string
	initMsgNum int64

	msgLock *sync.RWMutex
	Msgs    map[uint32]*DLMsg
}

func NewDLCollector(fileName string) *DLCollector {
	return &DLCollector{
		fileName: fileName,
		msgLock:  &sync.RWMutex{},
		Msgs:     make(map[uint32]*DLMsg),
	}
}

func (c *DLCollector) InitMsgNum(initMsgNum int64) *DLCollector {
	c.initMsgNum = initMsgNum
	return c
}

func (c *DLCollector) SaveToFile() (err error) {
	data, _ := json.Marshal(c)
	return utils.SaveToFile(c.fileName, data)
}

func (c *DLCollector) LoadFromFile() (err error) {
	data, err := utils.ReadFromFile(c.fileName)
	if err != nil {
		return
	}
	err = json.Unmarshal(data, &c)
	if err != nil {
		return
	}
	return
}

func (c *DLCollector) GetMsg() (msg *DLMsg, err error) {

	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

	// curl 'https://du.shadiao.app/api.php' \
	//   -H 'authority: du.shadiao.app' \
	//   -H 'accept: */*' \
	//   -H 'user-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 11_0_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36' \
	//   -H 'x-requested-with: XMLHttpRequest' \
	//   -H 'sec-fetch-site: same-origin' \
	//   -H 'sec-fetch-mode: cors' \
	//   -H 'sec-fetch-dest: empty' \
	//   -H 'referer: https://du.shadiao.app/' \
	//   -H 'accept-language: zh-CN,zh;q=0.9,en;q=0.8,zh-TW;q=0.7,ja;q=0.6' \
	//   -H 'cookie: Hm_lvt_f698287c4b523cfda8fa7f3e3b084832=1607416842; Hm_lpvt_f698287c4b523cfda8fa7f3e3b084832=1607416842' \
	//   --compressed
	// 人家呢只是胖着玩玩，而你是丑的认真。%
	// carrick@CarrickdeMacBook-Pro ~ %
	// carrick@CarrickdeMacBook-Pro ~ %
	// carrick@CarrickdeMacBook-Pro ~ % curl 'https://du.shadiao.app/api.php' \
	//   -H 'authority: du.shadiao.app' \
	//   -H 'accept: */*' \
	//   -H 'user-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 11_0_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36' \
	//   -H 'x-requested-with: XMLHttpRequest' \
	//   -H 'sec-fetch-site: same-origin' \
	//   -H 'sec-fetch-mode: cors' \
	//   -H 'sec-fetch-dest: empty' \
	//   -H 'referer: https://du.shadiao.app/' \
	//   -H 'accept-language: zh-CN,zh;q=0.9,en;q=0.8,zh-TW;q=0.7,ja;q=0.6' \
	//   -H 'cookie: Hm_lvt_f698287c4b523cfda8fa7f3e3b084832=1607416842; Hm_lpvt_f698287c4b523cfda8fa7f3e3b084832=1607416842' \
	//   --compressed

	req, err := http.NewRequest("GET", "https://du.shadiao.app/api.php", nil)
	if err != nil {
		// handle err
	}
	req.Header.Set("Authority", "du.shadiao.app")
	req.Header.Set("Accept", "*/*")
	req.Header.Set("User-Agent", "Mozilla/5.0 (Macintosh; Intel Mac OS X 11_0_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36")
	req.Header.Set("X-Requested-With", "XMLHttpRequest")
	req.Header.Set("Sec-Fetch-Site", "same-origin")
	req.Header.Set("Sec-Fetch-Mode", "cors")
	req.Header.Set("Sec-Fetch-Dest", "empty")
	req.Header.Set("Referer", "https://du.shadiao.app/")
	req.Header.Set("Accept-Language", "zh-CN,zh;q=0.9,en;q=0.8,zh-TW;q=0.7,ja;q=0.6")
	req.Header.Set("Cookie", "Hm_lvt_f698287c4b523cfda8fa7f3e3b084832=1607416842; Hm_lpvt_f698287c4b523cfda8fa7f3e3b084832=1607416842")

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()
	bodyBytes, _ := ioutil.ReadAll(resp.Body)
	fmt.Printf("BODY: %s\n", bodyBytes)

	//for idx, msg := range msgs {
	//	fmt.Printf("IDX: %d, MSG: %+v\n", idx, msg)
	//}

	return &DLMsg{
		CommentID: mmh3.Hash32(bodyBytes),
		RichText:  string(bodyBytes),
	}, nil
}

func (c *DLCollector) Load() (err error) {
	var (
		pauseCount    = 0
		maxPauseCount = 300
		i             = 0
	)

	for {
		i++
		msgThisRound, err := c.GetMsg()
		time.Sleep(100 * time.Millisecond)
		if err != nil {
			return err
		}

		c.msgLock.RLock()
		_, hit := c.Msgs[msgThisRound.CommentID]
		c.msgLock.RUnlock()

		if hit {
			pauseCount++
		} else {
			c.msgLock.Lock()
			c.Msgs[msgThisRound.CommentID] = msgThisRound
			fmt.Printf("TRY: %d, NUM: %d\n", i, len(c.Msgs))
			c.msgLock.Unlock()
		}

		if pauseCount == maxPauseCount {
			fmt.Printf("No more data could load, try: %d, current: %d\n", i, len(c.Msgs))
			break
		}
	}

	return nil
}

func (c *DLCollector) Save() (err error) {
	var (
		body string
	)
	for idx, msg := range c.Msgs {
		body += fmt.Sprintf("%5d: %s\n", idx, msg.RichText)
	}

	return ioutil.WriteFile(c.fileName, []byte(body), 0666)
}
